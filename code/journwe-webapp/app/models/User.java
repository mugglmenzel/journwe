package models;

import com.amazonaws.services.dynamodb.datamodeling.*;
import com.feth.play.module.pa.user.AuthUser;
import com.feth.play.module.pa.user.AuthUserIdentity;
import com.feth.play.module.pa.user.EmailIdentity;
import com.feth.play.module.pa.user.NameIdentity;
import controllers.dao.UserDAO;
import controllers.dao.UserEmailDAO;
import controllers.dao.UserSocialDAO;
import models.helpers.EnumMarshaller;
import play.data.validation.Constraints.Required;

@DynamoDBTable(tableName = "journwe-user")
public class User {

    private String id;

    @Required
    private String name;

    private boolean active;

    private EUserRole role = EUserRole.USER;

    /**
     * @return the id
     */
    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * @return the name
     */
    @DynamoDBAttribute
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return the active
     */
    @DynamoDBAttribute
    public boolean getActive() {
        return active;
    }

    /**
     * @param active the active to set
     */
    public void setActive(boolean active) {
        this.active = active;
    }

    /**
     * @return the role
     */
    @DynamoDBMarshalling(marshallerClass = UserRoleMarshaller.class)
    public EUserRole getRole() {
        return role;
    }

    /**
     * @param role the role to set
     */
    public void setRole(EUserRole role) {
        this.role = role;
    }

    /**
     * public static final Finder<Long, User> find = new Finder<Long, User>(
     * Long.class, User.class);
     */

    public static boolean existsByAuthUserIdentity(
            final AuthUserIdentity identity) {
        return getAuthUserFind(identity) != null;
    }

    private static User getAuthUserFind(final AuthUserIdentity identity) {
        UserSocial social = new UserSocialDAO().get(identity.getProvider(), identity.getId());
        return social != null ? new UserDAO().get(social.getUserId()) : null;
    }

    public static User findByAuthUserIdentity(final AuthUserIdentity identity) {
        if (identity == null)
            return null;

        return getAuthUserFind(identity);
    }

    public static User create(final AuthUser authUser) {
        final User user = new User();
        user.setActive(true);
        if (authUser instanceof NameIdentity) {
            final NameIdentity identity = (NameIdentity) authUser;
            final String name = identity.getName();
            if (name != null) {
                user.setName(name);
            }
        }
        new UserDAO().save(user);


        if (authUser instanceof EmailIdentity) {
            final UserEmail email = new UserEmail();
            email.setUserId(user.getId());

            final EmailIdentity identity = (EmailIdentity) authUser;
            // Remember, even when getting them from FB & Co., emails should be
            // verified within the application as a security breach there might
            // break your security as well!
            email.setEmail(identity.getEmail());
            email.setValidated(false);
            new UserEmailDAO().save(email);
        }

        final UserSocial social = new UserSocial();
        social.setProvider(authUser.getProvider());
        social.setSocialId(authUser.getId());
        social.setUserId(user.getId());
        new UserSocialDAO().save(social);

        return user;
    }

    public static class UserRoleMarshaller extends EnumMarshaller<EUserRole> {
    }

}
