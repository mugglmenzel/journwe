#####################################################################################
#
# My play-authenticate settings
#
#####################################################################################

play-authenticate {

    # If set to true, account merging is enabled, if set to false its disabled and accounts will never prompted to be merged
    # defaults to true
    accountMergeEnabled=true
    accountAutoMerge=false
    
    # if this is set to true, accounts are automatically linked
    # (e.g. if a user is logged in and uses a different authentication provider
    # which has NOT yet been registered to another user, this newly used authentication
    # provider gets added to the current local user
    # Handle setting this to true with care
    # If set to false, your resolver must not return null for askLink()
    # defaults to false
    accountAutoLink=true

    # Settings for the facebook-based authentication provider
    # if you are not using it, you can remove this portion of the config file
    # and remove the facebook provider from conf/play.plugins
    facebook {
        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }

        userInfoFields="id,name,first_name,middle_name,last_name,username,link,gender,email,timezone,locale,updated_time,picture"
        scope="email,publish_actions,xmpp_login"

        # Facebook credentials
        # These are mandatory for using OAuth and need to be provided by you,
        # if you want to use facebook as an authentication provider.
        # Get them here: https://developers.facebook.com/apps
        # Remove leading '#' after entering
        # journwe-production facebook app
		clientId="515340035175937"
		clientSecret="b5788518d689a6613a581722c98f4cf4"
    }

   # The Twitter settings
    twitter {
        redirectUri {
            secure=false
        }
        requestTokenUrl="https://api.twitter.com/oauth/request_token"
        accessTokenUrl="https://api.twitter.com/oauth/access_token"
        authorizationUrl="https://api.twitter.com/oauth/authorize"
        userInfoUrl="https://api.twitter.com/1.1/account/verify_credentials.json"

        # Get the credentials here: https://dev.twitter.com/docs/auth/oauth
        consumerKey="0FlhwuXI4JrikooGjz4fg"
        consumerSecret="p8eOgI4whYgBR3fua207CSIsqSgMI9UlOdw9LonKRvQ"

    }

    # The Foursquare settings
    foursquare {
        redirectUri {
            secure=false
        }
        authorizationUrl="https://foursquare.com/oauth2/authorize"
        accessTokenUrl="https://foursquare.com/oauth2/access_token"
        userInfoUrl="https://api.foursquare.com/v2/users/self"

        # Get the credentials here: https://foursquare.com/developers/app
        clientId="0JPX2AZUB2FSES1NL5W40CMPCGWEOPBCIRCWWEDX4VLPLBBV"
        clientSecret="MQDYPYVDVIDXFBUQWCFUZNVDKLLOTXF0NX14TUSN3ATM3JGD"

    }

    # The Google settings
    google {
        redirectUri {
            secure=false
        }
        authorizationUrl="https://accounts.google.com/o/oauth2/auth"
        accessTokenUrl="https://accounts.google.com/o/oauth2/token"
        userInfoUrl="https://www.googleapis.com/oauth2/v1/userinfo"
        scope="https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/plus.me https://www.googleapis.com/auth/plus.stream.write"

        # Additional parameters - Read more about them here: https://developers.google.com/accounts/docs/OAuth2WebServer#offline
        # accessType="offline"
        # approvalPrompt="force"

        # Get the credentials here: https://code.google.com/apis/console
        # Remove leading '#' after entering:
        clientId="586348369434-sgp7ctbushp6u32pjdk7rqcjnmffg6h8.apps.googleusercontent.com"
        clientSecret="cujt9DOOdoYPhgcWPc8-TWmt"
    }

    password {
        mail {
            verificationLink {
                # Whether the verification link will be HTTPS
                secure=false
            }
            passwordResetLink {
                # Whether the password reset link will be HTTPS
                secure=false
            }
            from {
                # Mailing from address
                email="no-reply@journwe.com"

                # Mailing name
                name="JournWe.com"
            }
        }
        # Whether to directly log in after the password reset (true)
        # or send the user to the login page (false)
        loginAfterPasswordReset=true
    }
}